from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)

bot = Bot(token="–í–ê–®_–¢–û–ö–ï–ù")
dp = Dispatcher(bot)

# ===== –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ (REPLY-–ö–õ–ê–í–ò–ê–¢–£–†–ê) =====
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üìû")],
            [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ üì∑")]
        ]
    )

# ===== –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò =====
def generate_inline_buttons():
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager"),
        InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="request_photo")
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start =====
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    welcome_text = (
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n\n"
        "- –•–≤–æ–π–Ω—ã–µ –ø–æ—Ä–æ–¥—ã (—Å–æ—Å–Ω–∞, –µ–ª—å)\n"
        "- –î–æ—Å–∫–∞ 1/2 —Å–æ—Ä—Ç–∞, –±—Ä—É—Å–æ–∫, —Ä–µ–π–∫–∞\n"
        "- –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=main_menu_keyboard()
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö =====
@dp.message_handler(lambda message: message.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üìû")
async def contact_manager(message: types.Message):
    contact_info = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
        "Email: manager@lesopilka.ru\n\n"
        "‚è± –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–≤–æ–Ω–∫–∞:"
    )
    
    await message.answer(
        contact_info,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å", url="tel:+79991234567")
        )
    )

@dp.message_handler(lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ üì∑")
async def request_photo(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ñ–æ—Ç–æ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton("–î–æ—Å–∫–∞ 1 —Å–æ—Ä—Ç", callback_data="photo_board1"),
                    InlineKeyboardButton("–î–æ—Å–∫–∞ 2 —Å–æ—Ä—Ç", callback_data="photo_board2")
                ],
                [
                    InlineKeyboardButton("–ë—Ä—É—Å–æ–∫ 50x50", callback_data="photo_bar"),
                    InlineKeyboardButton("–†–µ–π–∫–∞ 25x50", callback_data="photo_lath")
                ]
            ]
        )
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö =====
@dp.callback_query_handler(lambda c: c.data == "contact_manager")
async def process_callback_contact(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç"
    )

@dp.callback_query_handler(lambda c: c.data.startswith('photo_'))
async def send_photos(callback_query: types.CallbackQuery):
    material = callback_query.data.split('_')[1]
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"–§–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏..."
    )
    # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:
    # await bot.send_photo(callback_query.from_user.id, photo=open(f'{material}.jpg', 'rb'))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
