from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

bot = Bot(token="–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê =====
class CalculatorStates(StatesGroup):
    waiting_material = State()
    waiting_size = State()
    waiting_quantity = State()

# ===== –î–ê–ù–ù–´–ï –î–õ–Ø –†–ê–°–ß–ï–¢–û–í =====
MATERIALS = {
    "board1": {"name": "–î–æ—Å–∫–∞ 1 —Å–æ—Ä—Ç 6–º", "sizes": ["25x100", "25x150", "40x100", "40x150", "40x200", "50x100", "50x150", "50x200"]},
    "board2": {"name": "–î–æ—Å–∫–∞ 2 —Å–æ—Ä—Ç", "sizes": ["25x100x3–º", "25x100x6–º", "25x150x3–º", "25x150x6–º"]},
    "bar": {"name": "–ë—Ä—É—Å–æ–∫ 50x50x3–º", "size": "50x50x3000"},
    "lath": {"name": "–†–µ–π–∫–∞ 25x50x3–º", "size": "25x50x3000"}
}

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (—à—Ç—É–∫ –≤ –º¬≥)
VOLUME_COEFFICIENTS = {
    "25x100x6000": 0.015,   # 1 –º¬≥ = 66.6 —à—Ç
    "25x150x6000": 0.0225,  # 1 –º¬≥ = 44.4 —à—Ç
    "40x100x6000": 0.024,   # 1 –º¬≥ = 41.6 —à—Ç
    "40x150x6000": 0.036,   # 1 –º¬≥ = 27.7 —à—Ç
    "40x200x6000": 0.048,   # 1 –º¬≥ = 20.8 —à—Ç
    "50x100x6000": 0.03,    # 1 –º¬≥ = 33.3 —à—Ç
    "50x150x6000": 0.045,   # 1 –º¬≥ = 22.2 —à—Ç
    "50x200x6000": 0.06,    # 1 –º¬≥ = 16.6 —à—Ç
    "25x100x3000": 0.0075,  # 1 –º¬≥ = 133.3 —à—Ç
    "25x150x3000": 0.01125, # 1 –º¬≥ = 88.8 —à—Ç
    "50x50x3000": 0.0075,   # 1 –º¬≥ = 133.3 —à—Ç (–±—Ä—É—Å–æ–∫)
    "25x50x3000": 0.00375   # 1 –º¬≥ = 266.6 —à—Ç (—Ä–µ–π–∫–∞)
}

# –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
NORMALIZED_COEFFS = {}
for key, value in VOLUME_COEFFICIENTS.items():
    normalized_key = key.lower().replace("x", "").replace(" ", "")
    NORMALIZED_COEFFS[normalized_key] = value

# ===== –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ =====
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±—ä–µ–º–æ–≤ üìê")],
            [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üìû"), 
             KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ üì∑")]
        ]
    )

# ===== –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò –î–õ–Ø –§–û–¢–û =====
def photo_materials_keyboard():
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–î–æ—Å–∫–∞ 1 —Å–æ—Ä—Ç", callback_data="photo_board1"),
        InlineKeyboardButton("–î–æ—Å–∫–∞ 2 —Å–æ—Ä—Ç", callback_data="photo_board2"),
        InlineKeyboardButton("–ë—Ä—É—Å–æ–∫ 50x50", callback_data="photo_bar"),
        InlineKeyboardButton("–†–µ–π–∫–∞ 25x50", callback_data="photo_lath")
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start =====
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    welcome_text = (
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –õ–µ—Å–æ–ø–∏–ª–∫–∞.\n"
        "–ü–æ–º–æ–≥—É –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n\n"
        "- –•–≤–æ–π–Ω—ã–µ –ø–æ—Ä–æ–¥—ã (—Å–æ—Å–Ω–∞, –µ–ª—å)\n"
        "- –î–æ—Å–∫–∞ 1/2 —Å–æ—Ä—Ç–∞, –±—Ä—É—Å–æ–∫, —Ä–µ–π–∫–∞\n"
        "- –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=main_menu_keyboard()
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ =====

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±—ä–µ–º–æ–≤
@dp.message_handler(lambda message: message.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±—ä–µ–º–æ–≤ üìê")
async def start_calculator(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for key, mat in MATERIALS.items():
        keyboard.add(InlineKeyboardButton(mat["name"], callback_data=f"calc_{key}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=keyboard)
    await CalculatorStates.waiting_material.set()

# –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
@dp.message_handler(lambda message: message.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üìû")
async def contact_manager(message: types.Message):
    contact_info = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
        "Email: manager@lesopilka.ru\n\n"
        "‚è± –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–≤–æ–Ω–∫–∞:"
    )
    
    await message.answer(
        contact_info,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å", url="tel:+79991234567")
        )
    )

# –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ üì∑")
async def request_photo(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ñ–æ—Ç–æ:",
        reply_markup=photo_materials_keyboard()
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê =====

# –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@dp.callback_query_handler(lambda c: c.data.startswith('calc_'), state=CalculatorStates.waiting_material)
async def select_material(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    material_key = callback_query.data.split('_')[1]
    await state.update_data(material=material_key)
    
    mat_data = MATERIALS[material_key]
    
    if "sizes" in mat_data:  # –î–ª—è –¥–æ—Å–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
        keyboard = InlineKeyboardMarkup(row_width=2)
        for size in mat_data["sizes"]:
            keyboard.add(InlineKeyboardButton(size, callback_data=f"size_{size}"))
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=keyboard)
        await CalculatorStates.waiting_size.set()
    else:  # –î–ª—è –±—Ä—É—Å–∫–∞/—Ä–µ–π–∫–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ ({mat_data['name']}):")
        await state.update_data(size=mat_data["size"])
        await CalculatorStates.waiting_quantity.set()

# –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å–æ–∫)
@dp.callback_query_handler(lambda c: c.data.startswith('size_'), state=CalculatorStates.waiting_size)
async def select_size(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    
    size = callback_query.data.split('_')[1]
    await state.update_data(size=size)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫:")
    await CalculatorStates.waiting_quantity.set()

# –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞
@dp.message_handler(state=CalculatorStates.waiting_quantity)
async def calculate_volume(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
            
        data = await state.get_data()
        material_key = data["material"]
        size = data["size"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
        size_key = size
        
        # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        if material_key == "board1":
            size_key = f"{size}x6000"
        elif material_key == "board2":
            if "3–º" in size:
                size_key = size.replace("3–º", "3000")
            elif "6–º" in size:
                size_key = size.replace("6–º", "6000")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞
        normalized_key = size_key.lower().replace("x", "").replace(" ", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±—ä–µ–º–∞
        volume_coeff = NORMALIZED_COEFFS.get(normalized_key)
        
        if volume_coeff:
            total_volume = round(quantity * volume_coeff, 3)
            material_name = MATERIALS[material_key]["name"]
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã)
            material_price = 15000  # —Ä—É–±/–º¬≥
            delivery_price = 1500   # —Ä—É–±/–º¬≥
            
            material_cost = total_volume * material_price
            delivery_cost = total_volume * delivery_price
            total_cost = material_cost + delivery_cost
            
            response = (
                f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n"
                f"‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material_name} ({size})\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç\n"
                f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume} –º¬≥\n\n"
                f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
                f"‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material_cost:.0f} —Ä—É–±\n"
                f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost:.0f} —Ä—É–±\n"
                f"‚Ä¢ –ò—Ç–æ–≥–æ: {total_cost:.0f} —Ä—É–±\n\n"
                f"*–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
            )
            
            await message.answer(response, reply_markup=main_menu_keyboard())
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ '{size_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±—ä–µ–º–∞.", 
                               reply_markup=main_menu_keyboard())
            
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    
    await state.finish()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –§–û–¢–û =====
@dp.callback_query_handler(lambda c: c.data.startswith('photo_'))
async def send_photos(callback_query: types.CallbackQuery):
    material_type = callback_query.data.split('_')[1]
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    descriptions = {
        "board1": "–î–æ—Å–∫–∞ 1 —Å–æ—Ä—Ç–∞, 6 –º–µ—Ç—Ä–æ–≤. –ò–¥–µ–∞–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è, –º–∏–Ω–∏–º—É–º —Å—É—á–∫–æ–≤.",
        "board2": "–î–æ—Å–∫–∞ 2 —Å–æ—Ä—Ç–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç. –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–æ–π –æ–±–∑–æ–ª.",
        "bar": "–ë—Ä—É—Å–æ–∫ 50x50 –º–º, –¥–ª–∏–Ω–∞ 3 –º–µ—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–∞—Ä–∫–∞—Å–æ–≤ –∏ –æ–±—Ä–µ—à–µ—Ç–∫–∏.",
        "lath": "–†–µ–π–∫–∞ 25x50 –º–º, –¥–ª–∏–Ω–∞ 3 –º–µ—Ç—Ä–∞. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö."
    }
    
    material_names = {
        "board1": "–î–æ—Å–∫–∞ 1 —Å–æ—Ä—Ç",
        "board2": "–î–æ—Å–∫–∞ 2 —Å–æ—Ä—Ç",
        "bar": "–ë—Ä—É—Å–æ–∫ 50x50",
        "lath": "–†–µ–π–∫–∞ 25x50"
    }
    
    try:
        name = material_names.get(material_type, "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª")
        description = descriptions.get(material_type, "–§–æ—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
        # await bot.send_photo(
        #     chat_id=callback_query.from_user.id,
        #     photo=open(f"photos/{material_type}.jpg", "rb"),
        #     caption=f"{name}\n{description}"
        # )
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:
        await bot.send_message(
            callback_query.from_user.id,
            f"üì∏ {name}\n{description}\n\n"
            "–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ."
        )
        
        await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        await bot.send_message(callback_query.from_user.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        await bot.answer_callback_query(callback_query.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –î–†–£–ì–ò–• –°–û–û–ë–©–ï–ù–ò–ô =====
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_menu_keyboard()
    )

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
