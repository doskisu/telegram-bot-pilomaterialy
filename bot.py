from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

bot = Bot(token="–í–ê–®_–¢–û–ö–ï–ù")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê =====
class CalculatorStates(StatesGroup):
    waiting_material = State()
    waiting_size = State()
    waiting_quantity = State()

# ===== –î–ê–ù–ù–´–ï –î–õ–Ø –†–ê–°–ß–ï–¢–û–í =====
MATERIALS = {
    "board1": {"name": "–î–æ—Å–∫–∞ 1 —Å–æ—Ä—Ç 6–º", "sizes": ["25x100", "25x150", "40x100", "40x150", "40x200", "50x100", "50x150", "50x200"]},
    "board2": {"name": "–î–æ—Å–∫–∞ 2 —Å–æ—Ä—Ç", "sizes": ["25x100x3–º", "25x100x6–º", "25x150x3–º", "25x150x6–º"]},
    "bar": {"name": "–ë—Ä—É—Å–æ–∫ 50x50x3–º", "size": "50x50x3000"},
    "lath": {"name": "–†–µ–π–∫–∞ 25x50x3–º", "size": "25x50x3000"}
}

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (—à—Ç—É–∫ –≤ –º¬≥)
VOLUME_COEFFICIENTS = {
    "25x100x6000": 0.015,   # 1 –º¬≥ = 66.6 —à—Ç
    "25x150x6000": 0.0225,  # 1 –º¬≥ = 44.4 —à—Ç
    "40x100x6000": 0.024,   # 1 –º¬≥ = 41.6 —à—Ç
    "40x150x6000": 0.036,   # 1 –º¬≥ = 27.7 —à—Ç
    "40x200x6000": 0.048,   # 1 –º¬≥ = 20.8 —à—Ç
    "50x100x6000": 0.03,    # 1 –º¬≥ = 33.3 —à—Ç
    "50x150x6000": 0.045,   # 1 –º¬≥ = 22.2 —à—Ç
    "50x200x6000": 0.06,    # 1 –º¬≥ = 16.6 —à—Ç
    "25x100x3000": 0.0075,  # 1 –º¬≥ = 133.3 —à—Ç
    "25x150x3000": 0.01125, # 1 –º¬≥ = 88.8 —à—Ç
    "50x50x3000": 0.0075,   # 1 –º¬≥ = 133.3 —à—Ç (–±—Ä—É—Å–æ–∫)
    "25x50x3000": 0.00375   # 1 –º¬≥ = 266.6 —à—Ç (—Ä–µ–π–∫–∞)
}

# ===== –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ =====
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±—ä–µ–º–æ–≤ üìê")],
            [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üìû"), 
             KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ üì∑")]
        ]
    )

# ===== –ó–ê–ü–£–°–ö –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê =====
@dp.message_handler(lambda message: message.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±—ä–µ–º–æ–≤ üìê")
async def start_calculator(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for key, mat in MATERIALS.items():
        keyboard.add(InlineKeyboardButton(mat["name"], callback_data=f"calc_{key}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=keyboard)
    await CalculatorStates.waiting_material.set()

# ===== –í–´–ë–û–† –ú–ê–¢–ï–†–ò–ê–õ–ê =====
@dp.callback_query_handler(lambda c: c.data.startswith('calc_'), state=CalculatorStates.waiting_material)
async def select_material(callback_query: types.CallbackQuery, state: FSMContext):
    material_key = callback_query.data.split('_')[1]
    await state.update_data(material=material_key)
    
    mat_data = MATERIALS[material_key]
    
    if "sizes" in mat_data:  # –î–ª—è –¥–æ—Å–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
        keyboard = InlineKeyboardMarkup(row_width=2)
        for size in mat_data["sizes"]:
            keyboard.add(InlineKeyboardButton(size, callback_data=f"size_{size}"))
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=keyboard)
        await CalculatorStates.next()
    else:  # –î–ª—è –±—Ä—É—Å–∫–∞/—Ä–µ–π–∫–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ ({mat_data['name']}):")
        await state.update_data(size=mat_data["size"])
        await CalculatorStates.waiting_quantity.set()

# ===== –í–´–ë–û–† –†–ê–ó–ú–ï–†–ê (–¢–û–õ–¨–ö–û –î–õ–Ø –î–û–°–û–ö) =====
@dp.callback_query_handler(lambda c: c.data.startswith('size_'), state=CalculatorStates.waiting_size)
async def select_size(callback_query: types.CallbackQuery, state: FSMContext):
    size = callback_query.data.split('_')[1]
    await state.update_data(size=size)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫:")
    await CalculatorStates.next()

# ===== –†–ê–°–ß–ï–¢ –û–ë–™–ï–ú–ê =====
@dp.message_handler(state=CalculatorStates.waiting_quantity)
async def calculate_volume(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
            
        data = await state.get_data()
        size_key = data["size"].replace("x", "").lower()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ –∫–ª—é—á—É —Ä–∞–∑–º–µ—Ä–∞
        volume_coeff = next((v for k, v in VOLUME_COEFFICIENTS.items() 
                            if size_key in k.replace("x", "").lower()), None)
        
        if volume_coeff:
            total_volume = round(quantity * volume_coeff, 2)
            material_name = MATERIALS[data["material"]]["name"]
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä: 1500 —Ä—É–±/–º¬≥)
            delivery_cost = total_volume * 1500
            
            response = (
                f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n"
                f"‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material_name} ({data['size']})\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç\n"
                f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume} –º¬≥\n"
                f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost:.0f} —Ä—É–±\n\n"
                f"*–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
            )
            
            await message.answer(response, reply_markup=main_menu_keyboard())
        else:
            await message.answer("–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0!")
        return
    
    await state.finish()

# ===== –û–°–¢–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞) =====
# ... [–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, —Ñ–æ—Ç–æ –∏ —Ç.–¥.] ...

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
